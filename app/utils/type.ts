import { z } from "zod";

const coreSchema = z.object({
  categories: z
    .array(
      z.enum([
        "Applications/dApps",
        "Community & Coordination",
        "Developer tools",
        "Hubs",
        "Infrastructure",
        "Security & Privacy",
        "Storage & Data",
        "Events",
        "Local Communities",
        "Other",
      ])
    )
    .min(1),
  appUrl: z.string().nullable(),
  dateFounded: z.string().datetime({ offset: true }),
  dateLaunch: z.string().datetime({ offset: true }).nullable(),
  devStatus: z.enum([
    "Idea/Whitepaper",
    "Prototype",
    "In development",
    "Alpha",
    "Beta",
    "Broken / Abandoned",
    "Concept",
    "Stealth",
    "Active Community",
  ]),
  openSource: z.boolean(),
  codeRepo: z.string().nullable(),
  orgStructure: z.enum([
    "For-Profit Company",
    "Non-Profit Organization / Association",
    "Foundation",
    "Cooperative",
    "DAO",
    "Federated DAO / SubDAO",
    "Project within a DAO",
    "Anonymous Collective",
    "Sole Developer",
    "University / Academic-Led Initiative",
    "Public-Private Partnership",
    "Community-Led Initiative (no legal entity)",
    "Hybrid Structure (e.g. Company + DAO)",
    "Evolving Structure",
  ]),
  publicGoods: z.boolean(),
  founders: z
    .array(
      z.object({
        name: z.string(),
        title: z.string(),
        region: z.string().optional(),
      })
    )
    .min(1),
  whitePaper: z.string().nullable(),
});

const finalSchema = coreSchema.extend({
  meta: z.object({
    is_autogenerated: z.literal(true),
    data_quality: z.enum(["low", "mixed", "high"]),
    generated_at: z.string(),
  }),
});

type CoreSchemaType = z.infer<typeof coreSchema>;
type FinalSchemaType = z.infer<typeof finalSchema>;

interface EnvConfig {
  OPENAI_API_KEY: string;
  ROOTDATA_API_KEY?: string;
  PENSIEVE_BASE_URL?: string;
  PENSIEVE_SYSTEM_TOKEN?: string;
  PENSIEVE_SUPABASE_JWT?: string;
  HTML_EXCERPT: number;
  DEFAULT_LIMIT: number;
}

interface DetailedHit {
  url: string;
  html_excerpt: string;
}

interface CompatibleModelLike {
  specificationVersion: "v1";
  defaultObjectGenerationMode: "json" | "tool" | "grammar" | undefined;
  modelId: string;
  provider: string;
  doGenerate: (options: any) => PromiseLike<unknown>;
  doStream: (options: any) => PromiseLike<unknown>;
}

interface FundingEventLike {
  date?: unknown;
  financing_time?: unknown;
  announcement_date?: unknown;
  investors?: unknown;
  investment_institutions?: unknown;
  amount?: unknown;
  financing_amount?: unknown;
  amount_usd?: unknown;
  round?: unknown;
  round_name?: unknown;
  stage?: unknown;
  currency?: unknown;
  funding_currency?: unknown;
}

export type {
  CoreSchemaType,
  FinalSchemaType,
  EnvConfig,
  DetailedHit,
  CompatibleModelLike,
  FundingEventLike,
};

export { coreSchema, finalSchema };
